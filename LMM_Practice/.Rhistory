emmeans, ggplot2, ggpubr, lattice, latticeExtra, parallel, effects)
library("patchwork")
library("klippy")
options(knitr.kable.NA = '') # hide NA with knitr function
klippy::klippy()
## load data
dat <- read.csv("dat_tutorial.csv", header = T)
dim(dat) # 84 rows 5 columns
glimpse(dat, width=70)
## check data
view(dat)
table(dat$SN)
table(dat$Cond, dat$SN)
table(dat$Item, dat$SN)
headTail(dat)
## change class of main factors: double to factor
dat$SN = factor(dat$SN)
dat$Cond = factor(dat$Cond, levels=c(1,2), labels=c("c1","c2"))
dat$Item = factor(dat$Item)
# trimming
tdat <- dat %>% filter(RT > 200 & RT < 10000) %>%
group_by(SN) %>% # grouping by participants
nest() %>%
mutate(lbound = map(data, ~mean(.$RT)-3*sd(.$RT)),
ubound = map(data, ~mean(.$RT)+3*sd(.$RT))) %>% # make new data (3sd cut)
unnest(c(lbound, ubound))%>%
unnest(data) %>%
mutate(Outlier = (RT < lbound)|(RT > ubound)) %>% # set outlier
filter(Outlier == FALSE) %>% # filtering outlier
ungroup() %>%
select(SN, Cond, Item, RT) # select variables to analyze
# outlier trial ratio
100-100*(nrow(tdat)/nrow(dat))
# mean number of trials for each Conds
tdat %>% group_by(SN, Cond) %>%
summarise(NumTrial = length(RT)) %>%
ungroup() %>%
group_by(Cond) %>%
summarise(Mean = mean(NumTrial),
Median = median(NumTrial),
Min = min(NumTrial),
Max = max(NumTrial)) %>%
ungroup %>%
kable(digits=2)
# check distribution
# before trimming
den1 <- ggplot(dat, aes(x=RT)) +
geom_density() +
theme_bw(base_size = 18) +
labs(x = "Raw RT") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# after trimming
den2 <- ggplot(tdat, aes(x=RT)) +
geom_density() +
theme_bw(base_size = 18) +
labs(x = "Trimmed RT") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
den1 + den2
# ---------------------------------------------------------- #
# 4. Descriptive Statistics ####
# ---------------------------------------------------------- #
# subject-level, long format
p1rtL <- tdat %>% group_by(SN, Cond) %>%
dplyr::summarise(RT = mean(RT)) %>%
ungroup()
p1rtL %>% kable(digits=2)
# subject-level, wide format
p1rtW <- p1rtL %>% spread(key=Cond, value = RT)
p1rtW %>% kable(digits=2)
# summary table (grand mean)
p1rtG <- p1rtL %>% group_by(Cond) %>%
summarise(RT.m = mean(RT), RT.sd = sd(RT)) %>%
ungroup()
p1rtG$RT.se <- Rmisc::summarySEwithin(data = p1rtL, measurevar = "RT",
idvar = "SN", withinvars = "Cond")$se
p1rtG$RT.ci <- Rmisc::summarySEwithin(data = p1rtL, measurevar = "RT",
idvar = "SN", withinvars = "Cond")$ci
p1rtG <- p1rtG %>%
mutate(lower.ci = RT.m-RT.ci,
upper.ci = RT.m+RT.ci)
p1rtG %>% kable(digits=2)
# simple plot
apa_barplot(data=as.data.frame(p1rtL),
id="SN", dv="RT",
ylab = "RT (ms)", xlab = "Condition",
main = c("Response Time (ms)"),
# dispersion =  within_subjects_conf_int, # w/n confidence interval
factors=c("Cond"),
ylim = c(0, 3000),
las=1)
# bwtheme  <- canonical.theme(color = FALSE)
# a = bwplot(RT ~ SN|Cond + Group, tdat, pch="|",
#        par.settings=bwtheme, main="참가자별", xlab="SN", ylab="RT (ms)")
# b = bwplot(RT ~ Item|Cond + Group, tdat, pch="|",
#        par.settings=bwtheme, main="자극별", xlab="Item", ylab="RT (ms)")
a = ggplot(data=tdat, aes(x = SN, y = RT)) +
ggtitle("참가자별") +
xlab("참가자") + ylab("RT") + theme_bw() +
theme(text=element_text(size=14)) +
theme(legend.title = element_text(face = 1,size = 15)) +
geom_boxplot()
b = ggplot(data=tdat, aes(x = Item, y = RT)) +
ggtitle("자극별") +
xlab("자극") + ylab("RT") + theme_bw() +
theme(text=element_text(size=14)) +
theme(legend.title = element_text(face = 1,size = 15)) +
geom_boxplot()
ggarrange(a, b)
## RM ANOVA
p1rtL %>% kable(digits=2)
rt.aov <- aov_ez(id="SN", dv = "RT", data = p1rtL, within = c("Cond"))
summary(rt.aov)
anova(rt.aov)
nice(rt.aov, es="pes")
## Linear Model
rt.lm <- lm(RT ~ Cond, p1rtL)
summary(rt.lm)
anova(rt.lm)
p1rtL$Condl <- as.numeric(p1rtL$Cond)
ggplot(p1rtL, aes(x=Condl, y=RT)) +
geom_point(size = 4) +
geom_smooth(aes(x=Condl, y=RT), data=p1rtL, method="lm") +
labs(x = "Condition",
y = "RT") +
coord_cartesian(xlim = c(0.5, 2.5)) +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
# Random effect only
rt.lmer.m0 <- lmer(RT ~ (1|SN), tdat, REML = FALSE)
# Random Intercept by Subject
rt.lmer.m1 <- lmer(RT ~ Cond + (1|SN), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
anova(rt.lmer.m0, rt.lmer.m1)
# Random Intercept & Slope by Subject
rt.lmer.m2 <- lmer(RT ~ Cond + (1+Cond|SN), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
# Random Intercept by Item
rt.lmer.m3 <- lmer(RT ~ Cond + (1|Item), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
anova(rt.lmer.m1)
summary(rt.lmer.m1)
# Random Intercept & Slope by Subject
rt.lmer.m2 <- lmer(RT ~ Cond + (1+Cond|SN), tdat, REML = FALSE)
summary(rt.lmer.m2)
anova(rt.lmer.m2)
# Random Intercept by Subject
rt.lmer.m1 <- lmer(RT ~ Cond + (1|SN), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
anova(rt.lmer.m0, rt.lmer.m1)
# Random Intercept & Slope by Subject
rt.lmer.m2 <- lmer(RT ~ Cond + (1+Cond|SN), tdat, REML = FALSE)
summary(rt.lmer.m2)
anova(rt.lmer.m2)
# Random Intercept by Item
rt.lmer.m3 <- lmer(RT ~ Cond + (1|Item), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
# Random Intercept & Slope by Item
rt.lmer.m4 <- lmer(RT ~ Cond + (1+Cond|Item), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
# Cross-Random Effect Model (Full Model)
rt.lmer.full <- lmer(RT ~ Cond + (1 + Cond|SN) + (1 + Cond|Item), tdat, REML = FALSE)
summary(rt.lmer.full)
anova(rt.lmer.full)
# structure of random effect
coef(rt.lmer.full) # random intercept & slope
ranef(rt.lmer.full) # random effect
coef(rt.lmer.full)$SN$`(Intercept)` - ranef(rt.lmer.full)$SN$`(Intercept)` # F1 Intercept, b0
coef(rt.lmer.full)$Item$`(Intercept)` - ranef(rt.lmer.full)$Item$`(Intercept)` # F2 Intercept, b0
# Best Linear Unbias Predictions (BLUPs)
ranef(rt.lmer.full)$SN
AA <- ranef(rt.lmer.full)$SN
colnames(AA) <- c("intercept","condc2")
A1 <- AA %>% rownames_to_column() %>%
select(rowname, intercept) %>%
column_to_rownames(var = "rowname")
A2 <- AA %>% rownames_to_column() %>%
select(rowname, condc2) %>%
column_to_rownames(var = "rowname")
BLUPs <- cbind(A1, A2)
cor.test(formula = ~ intercept + condc2, data = BLUPs,
method = "pearson", alternative = "two.sided")
BLUPs %>% kable(digits=3)
B.P <- ggplot(BLUPs, aes(x=intercept, y=condc2)) +
geom_point(size = 4) +
geom_smooth(method=lm) +
labs(x = expression(Delta*" intercept"),
y = expression(Delta*" cond1 to cond2")) +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
B.P
# Assumtion check
# 1) Linearity & Homoskedasticity(equal variance)
plot(fitted(rt.lmer.full),residuals(rt.lmer.full)) +
abline(h=0, col="red", lwd=1, lty=2)
plot(residuals(rt.lmer.full))
# 2) Normality of residuals
hist(residuals(rt.lmer.full))
qqnorm(residuals(rt.lmer.full)) +
qqline(residuals(rt.lmer.full), col='2')
# model comparison
anova(rt.lmer.full, rt.lmer.m1) # LRT method
#### Afex Method
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))
rt.afex.full <- afex::mixed(RT ~ Cond + (1+Cond|SN) + (1+Cond|Item),
data = tdat,
method = "S",  # "KR", "S", "LRT", "PB"
REML = FALSE,
cl = cl,
control = lmerControl(optCtrl = list(maxfun = 1e10)))
stopCluster(cl)
summary(rt.afex.full)
anova(rt.afex.full)
# Best Linear Unbias Predictions (BLUPs)
ranef(rt.afex.full$full_model)$SN
AA <- ranef(rt.afex.full$full_model)$SN
colnames(AA) <- c("intercept","condc1")
A1 <- AA %>% rownames_to_column() %>%
select(rowname, intercept) %>%
column_to_rownames(var = "rowname")
A2 <- AA %>% rownames_to_column() %>%
select(rowname, condc1) %>%
column_to_rownames(var = "rowname")
BLUPs <- cbind(A1, A2)
cor.test(formula = ~ intercept + condc1, data = BLUPs,
method = "pearson", alternative = "two.sided")
BLUPs %>% kable(digits=3)
B.P <- ggplot(BLUPs, aes(x=intercept, y=condc1)) +
geom_point(size = 4) +
geom_smooth(method=lm) +
labs(x = expression(Delta*" intercept"),
y = expression(Delta*" cond2 to cond1")) +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
B.P
### post-hoc
rt.posthoc <- emmeans(rt.afex.full, pairwise ~ Cond, type = "response", adjust="bon") # adjust="bon"
rt.posthoc$contrasts %>% kable(digits=2)
plot(rt.posthoc, horizontal = FALSE, comparisons = T)
model <- rt.afex.full$full_model
model_predicted_effects <- as.data.frame(effects::effect("Cond", rt.lmer.full))
ggplot(data = model_predicted_effects,
aes(x = Cond, y = fit)) +
geom_pointrange(aes(ymax = upper,
ymin = lower),
position = position_dodge(width = 1)) +
# geom_line(aes(x = Block, y = fit, group = Btw),
# position = position_dodge(width = 1)) +
ylab("RT") +
xlab("Condition") +
scale_colour_grey() +
theme_classic() +
theme(legend.justification=c(1,1), legend.position=c(1,1))
# these are estimated/predicted plots
# install // load packages
# Some packages need to be loaded.
# We use `pacman` as a package manager, which takes care of the other packages.
if (!require("devtools", quietly = TRUE)) install.packages("devtools")
if (!require("papaja", quietly = TRUE)) devtools::install_github("crsh/papaja")
if (!require("patchwork", quietly = TRUE)) devtools::install_github("thomasp85/patchwork")
if (!require("klippy", quietly = TRUE)) devtools::install_github("RLesur/klippy")
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
if (!require("Rmisc", quietly = TRUE)) install.packages("Rmisc") # Never load it directly.
pacman::p_load(tidyverse, papaja, knitr, dplyr, car, psych, afex, lme4, lmerTest,
emmeans, ggplot2, ggpubr, lattice, latticeExtra, parallel, effects)
library("patchwork")
library("klippy")
options(knitr.kable.NA = '') # hide NA with knitr function
klippy::klippy()
## load data
dat <- read.csv("dat_tutorial.csv", header = T)
dim(dat) # 84 rows 5 columns
glimpse(dat, width=70)
## check data
view(dat)
table(dat$SN)
## change class of main factors: double to factor
dat$SN = factor(dat$SN)
dat$Cond = factor(dat$Cond, levels=c(1,2), labels=c("c1","c2"))
dat$Item = factor(dat$Item)
# trimming
tdat <- dat %>% filter(RT > 200 & RT < 10000) %>%
group_by(SN) %>% # grouping by participants
nest() %>%
mutate(lbound = map(data, ~mean(.$RT)-3*sd(.$RT)),
ubound = map(data, ~mean(.$RT)+3*sd(.$RT))) %>% # make new data (3sd cut)
unnest(c(lbound, ubound))%>%
unnest(data) %>%
mutate(Outlier = (RT < lbound)|(RT > ubound)) %>% # set outlier
filter(Outlier == FALSE) %>% # filtering outlier
ungroup() %>%
select(SN, Cond, Item, RT) # select variables to analyze
# outlier trial ratio
100-100*(nrow(tdat)/nrow(dat))
# mean number of trials for each Conds
tdat %>% group_by(SN, Cond) %>%
summarise(NumTrial = length(RT)) %>%
ungroup() %>%
group_by(Cond) %>%
summarise(Mean = mean(NumTrial),
Median = median(NumTrial),
Min = min(NumTrial),
Max = max(NumTrial)) %>%
ungroup %>%
kable(digits=2)
# check distribution
# before trimming
den1 <- ggplot(dat, aes(x=RT)) +
geom_density() +
theme_bw(base_size = 18) +
labs(x = "Raw RT") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# after trimming
den2 <- ggplot(tdat, aes(x=RT)) +
geom_density() +
theme_bw(base_size = 18) +
labs(x = "Trimmed RT") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
den1 + den2
# ---------------------------------------------------------- #
# 4. Descriptive Statistics ####
# ---------------------------------------------------------- #
# subject-level, long format
p1rtL <- tdat %>% group_by(SN, Cond) %>%
dplyr::summarise(RT = mean(RT)) %>%
ungroup()
p1rtL %>% kable(digits=2)
# subject-level, wide format
p1rtW <- p1rtL %>% spread(key=Cond, value = RT)
p1rtW %>% kable(digits=2)
# summary table (grand mean)
p1rtG <- p1rtL %>% group_by(Cond) %>%
summarise(RT.m = mean(RT), RT.sd = sd(RT)) %>%
ungroup()
p1rtG$RT.se <- Rmisc::summarySEwithin(data = p1rtL, measurevar = "RT",
idvar = "SN", withinvars = "Cond")$se
p1rtG$RT.ci <- Rmisc::summarySEwithin(data = p1rtL, measurevar = "RT",
idvar = "SN", withinvars = "Cond")$ci
p1rtG <- p1rtG %>%
mutate(lower.ci = RT.m-RT.ci,
upper.ci = RT.m+RT.ci)
p1rtG %>% kable(digits=2)
a = ggplot(data=tdat, aes(x = SN, y = RT)) +
ggtitle("참가자별") +
xlab("참가자") + ylab("RT") + theme_bw() +
theme(text=element_text(size=14)) +
theme(legend.title = element_text(face = 1,size = 15)) +
geom_boxplot()
b = ggplot(data=tdat, aes(x = Item, y = RT)) +
ggtitle("자극별") +
xlab("자극") + ylab("RT") + theme_bw() +
theme(text=element_text(size=14)) +
theme(legend.title = element_text(face = 1,size = 15)) +
geom_boxplot()
ggarrange(a, b)
## RM ANOVA
p1rtL %>% kable(digits=2)
rt.aov <- aov_ez(id="SN", dv = "RT", data = p1rtL, within = c("Cond"))
summary(rt.aov)
anova(rt.aov)
nice(rt.aov, es="pes")
# Random effect only
rt.lmer.m0 <- lmer(RT ~ (1|SN), tdat, REML = FALSE)
summary(rt.lmer.m0)
# Random Intercept by Subject
rt.lmer.m1 <- lmer(RT ~ Cond + (1|SN), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
anova(rt.lmer.m0, rt.lmer.m1)
# Random Intercept & Slope by Subject
rt.lmer.m2 <- lmer(RT ~ Cond + (1+Cond|SN), tdat, REML = FALSE)
summary(rt.lmer.m2)
# Random Intercept & Slope by Subject
rt.lmer.m2 <- lmer(RT ~ Cond + (1+Cond|SN), tdat, REML = FALSE)
summary(rt.lmer.m2)
# Random Intercept & Slope by Item
rt.lmer.m4 <- lmer(RT ~ Cond + (1+Cond|Item), tdat, REML = FALSE)
summary(rt.lmer.m1)
anova(rt.lmer.m1)
# Cross-Random Effect Model (Full Model)
rt.lmer.full <- lmer(RT ~ Cond + (1 + Cond|SN) + (1 + Cond|Item), tdat, REML = FALSE)
summary(rt.lmer.full)
anova(rt.lmer.full)
# structure of random effect
coef(rt.lmer.full) # random intercept & slope
ranef(rt.lmer.full) # random effect
# structure of random effect
coef(rt.lmer.full) # random intercept & slope
ranef(rt.lmer.full) # random effect
coef(rt.lmer.full)$SN$`(Intercept)` - ranef(rt.lmer.full)$SN$`(Intercept)` # F1 Intercept, b0
coef(rt.lmer.full)$Item$`(Intercept)` - ranef(rt.lmer.full)$Item$`(Intercept)` # F2 Intercept, b0
summary(rt.lmer.full)
coef(rt.lmer.full)$Item$`(Intercept)` - ranef(rt.lmer.full)$Item$`(Intercept)` # F2 Intercept, b0
# Best Linear Unbias Predictions (BLUPs)
ranef(rt.lmer.full)$SN
AA <- ranef(rt.lmer.full)$SN
colnames(AA) <- c("intercept","condc2")
A1 <- AA %>% rownames_to_column() %>%
select(rowname, intercept) %>%
column_to_rownames(var = "rowname")
A2 <- AA %>% rownames_to_column() %>%
select(rowname, condc2) %>%
column_to_rownames(var = "rowname")
BLUPs <- cbind(A1, A2)
cor.test(formula = ~ intercept + condc2, data = BLUPs,
method = "pearson", alternative = "two.sided")
BLUPs %>% kable(digits=3)
B.P <- ggplot(BLUPs, aes(x=intercept, y=condc2)) +
geom_point(size = 4) +
geom_smooth(method=lm) +
labs(x = expression(Delta*" intercept"),
y = expression(Delta*" cond1 to cond2")) +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
B.P
# Assumtion check
# 1) Linearity & Homoskedasticity(equal variance)
plot(fitted(rt.lmer.full),residuals(rt.lmer.full)) +
abline(h=0, col="red", lwd=1, lty=2)
plot(residuals(rt.lmer.full))
# 2) Normality of residuals
hist(residuals(rt.lmer.full))
qqnorm(residuals(rt.lmer.full)) +
qqline(residuals(rt.lmer.full), col='2')
# model comparison
anova(rt.lmer.full, rt.lmer.m1) # LRT method
#### Afex Method
(nc <- detectCores())
cl <- makeCluster(rep("localhost", nc))
rt.afex.full <- afex::mixed(RT ~ Cond + (1+Cond|SN) + (1+Cond|Item),
data = tdat,
method = "S",  # "KR", "S", "LRT", "PB"
REML = FALSE,
cl = cl,
control = lmerControl(optCtrl = list(maxfun = 1e10)))
stopCluster(cl)
summary(rt.afex.full)
anova(rt.afex.full)
# Best Linear Unbias Predictions (BLUPs)
ranef(rt.afex.full$full_model)$SN
AA <- ranef(rt.afex.full$full_model)$SN
colnames(AA) <- c("intercept","condc1")
A1 <- AA %>% rownames_to_column() %>%
select(rowname, intercept) %>%
column_to_rownames(var = "rowname")
A2 <- AA %>% rownames_to_column() %>%
select(rowname, condc1) %>%
column_to_rownames(var = "rowname")
BLUPs <- cbind(A1, A2)
cor.test(formula = ~ intercept + condc1, data = BLUPs,
method = "pearson", alternative = "two.sided")
BLUPs %>% kable(digits=3)
B.P <- ggplot(BLUPs, aes(x=intercept, y=condc1)) +
geom_point(size = 4) +
geom_smooth(method=lm) +
labs(x = expression(Delta*" intercept"),
y = expression(Delta*" cond2 to cond1")) +
theme_bw(base_size = 18) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
B.P
### post-hoc
rt.posthoc <- emmeans(rt.afex.full, pairwise ~ Cond, type = "response", adjust="bon") # adjust="bon"
rt.posthoc$contrasts %>% kable(digits=2)
plot(rt.posthoc, horizontal = FALSE, comparisons = T)
model <- rt.afex.full$full_model
model_predicted_effects <- as.data.frame(effects::effect("Cond", rt.lmer.full))
ggplot(data = model_predicted_effects,
aes(x = Cond, y = fit)) +
geom_pointrange(aes(ymax = upper,
ymin = lower),
position = position_dodge(width = 1)) +
# geom_line(aes(x = Block, y = fit, group = Btw),
# position = position_dodge(width = 1)) +
ylab("RT") +
xlab("Condition") +
scale_colour_grey() +
theme_classic() +
theme(legend.justification=c(1,1), legend.position=c(1,1))
# these are estimated/predicted plots
# ---------------------------------------------------------- #
# ---------------------------------------------------------- #
# Appendix. GLMM ####
